import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de Minera√ß√£o",
    page_icon="‚õèÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üìä Dashboard de An√°lise de Dados de Minera√ß√£o")
st.markdown("---")

# Fun√ß√£o para carregar e tratar os dados
@st.cache_data
def carregar_dados():
    """Carrega e trata os dados do CSV"""
    try:
        # Carregar dados do link bruto do GitHub
        url = 'https://github.com/hoerique/Das-minere-ao/blob/main/Dados.csv'
        df = pd.read_csv(url)
        if df.empty:
            st.error("O arquivo CSV foi carregado, mas est√° vazio. Verifique o conte√∫do do arquivo no GitHub.")
            return None
        
        # Converter colunas de data
        df['Data de Produ√ß√£o'] = pd.to_datetime(df['Data de Produ√ß√£o'])
        
        # Extrair informa√ß√µes da data
        df['Ano'] = df['Data de Produ√ß√£o'].dt.year
        df['M√™s'] = df['Data de Produ√ß√£o'].dt.month
        df['Trimestre'] = df['Data de Produ√ß√£o'].dt.quarter
        
        # Converter colunas num√©ricas
        colunas_numericas = [
            'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 
            'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 
            'Lucro (R$)', 'Quantidade Exportada (Toneladas)', 
            'Custo Log√≠stico (R$)'
        ]
        
        for coluna in colunas_numericas:
            df[coluna] = pd.to_numeric(df[coluna], errors='coerce')
        
        # Calcular m√©tricas adicionais
        df['Margem de Lucro (%)'] = (df['Lucro (R$)'] / df['Volume de Vendas (R$)']) * 100
        df['Custo Total'] = df['Custo de Produ√ß√£o (R$)'] + df['Custo Log√≠stico (R$)']
        df['ROI (%)'] = (df['Lucro (R$)'] / df['Custo Total']) * 100
        
        # Limpar dados inconsistentes
        df = df.dropna()
        
        # Remover outliers extremos (valores muito discrepantes)
        for coluna in colunas_numericas:
            Q1 = df[coluna].quantile(0.25)
            Q3 = df[coluna].quantile(0.75)
            IQR = Q3 - Q1
            limite_inferior = Q1 - 1.5 * IQR
            limite_superior = Q3 + 1.5 * IQR
            df = df[(df[coluna] >= limite_inferior) & (df[coluna] <= limite_superior)]
        
        return df
    
    except Exception as e:
        st.error(f"Erro ao carregar dados do GitHub: {e}\nVerifique se o arquivo est√° dispon√≠vel e acess√≠vel.")
        return None

# Carregar dados
df = carregar_dados()

if df is not None:
    # Sidebar para filtros
    st.sidebar.header("üîç Filtros")
    
    # Filtro por produto
    produtos = ['Todos'] + list(df['Produto'].unique())
    produto_selecionado = st.sidebar.selectbox("Produto:", produtos)
    
    # Filtro por regi√£o
    regioes = ['Todas'] + list(df['Regi√£o'].unique())
    regiao_selecionada = st.sidebar.selectbox("Regi√£o:", regioes)
    
    # Filtro por ano
    anos = ['Todos'] + sorted(list(df['Ano'].unique()))
    ano_selecionado = st.sidebar.selectbox("Ano:", anos)
    
    # Filtro por classifica√ß√£o de sustentabilidade
    classificacoes = ['Todas'] + sorted(list(df['Classifica√ß√£o de Sustentabilidade'].unique()))
    classificacao_selecionada = st.sidebar.selectbox("Classifica√ß√£o de Sustentabilidade:", classificacoes)
    
    # Aplicar filtros
    df_filtrado = df.copy()
    
    if produto_selecionado != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['Produto'] == produto_selecionado]
    
    if regiao_selecionada != 'Todas':
        df_filtrado = df_filtrado[df_filtrado['Regi√£o'] == regiao_selecionada]
    
    if ano_selecionado != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['Ano'] == ano_selecionado]
    
    if classificacao_selecionada != 'Todas':
        df_filtrado = df_filtrado[df_filtrado['Classifica√ß√£o de Sustentabilidade'] == classificacao_selecionada]
    
    # KPIs Principais - 4 KPIs recomendados
    st.subheader("üìä KPIs Principais")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # KPI 1: Lucro Total (R$)
        lucro_total = df_filtrado['Lucro (R$)'].sum()
        lucro_total_geral = df['Lucro (R$)'].sum()
        st.metric(
            label="üíµ Lucro Total (R$)",
            value=f"R$ {lucro_total:,.0f}",
            delta=f"R$ {lucro_total - lucro_total_geral:+,.0f}" if len(df_filtrado) != len(df) else None,
            help="üìà Mede a rentabilidade da produ√ß√£o. F√≥rmula: Soma da coluna Lucro (R$)"
        )
    
    with col2:
        # KPI 2: Volume Total de Vendas (R$)
        vendas_totais = df_filtrado['Volume de Vendas (R$)'].sum()
        vendas_totais_geral = df['Volume de Vendas (R$)'].sum()
        st.metric(
            label="üí∞ Volume Total de Vendas (R$)",
            value=f"R$ {vendas_totais:,.0f}",
            delta=f"R$ {vendas_totais - vendas_totais_geral:+,.0f}" if len(df_filtrado) != len(df) else None,
            help="üí∞ Mostra o desempenho comercial. F√≥rmula: Soma da coluna Volume de Vendas (R$)"
        )
    
    with col3:
        # KPI 3: Margem de Lucro (%)
        margem_media = df_filtrado['Margem de Lucro (%)'].mean()
        margem_media_geral = df['Margem de Lucro (%)'].mean()
        st.metric(
            label="üìä Margem de Lucro (%)",
            value=f"{margem_media:.1f}%",
            delta=f"{margem_media - margem_media_geral:+.1f}%" if len(df_filtrado) != len(df) else None,
            help="üìä Indicador da efici√™ncia da opera√ß√£o. F√≥rmula: Lucro / Volume de Vendas * 100"
        )
    
    with col4:
        # KPI 4: Custo M√©dio Log√≠stico por Tonelada
        custo_logistico_total = df_filtrado['Custo Log√≠stico (R$)'].sum()
        quantidade_total = df_filtrado['Quantidade (Toneladas)'].sum()
        custo_medio_logistico = custo_logistico_total / quantidade_total if quantidade_total > 0 else 0
        
        custo_logistico_geral = df['Custo Log√≠stico (R$)'].sum()
        quantidade_geral = df['Quantidade (Toneladas)'].sum()
        custo_medio_geral = custo_logistico_geral / quantidade_geral if quantidade_geral > 0 else 0
        
        st.metric(
            label="üöö Custo M√©dio Log√≠stico por Tonelada",
            value=f"R$ {custo_medio_logistico:.2f}",
            delta=f"R$ {custo_medio_logistico - custo_medio_geral:+.2f}" if len(df_filtrado) != len(df) else None,
            help="üöö Avalia a efici√™ncia da distribui√ß√£o. F√≥rmula: Custo Log√≠stico (R$) / Quantidade (Toneladas)"
        )
    
    st.markdown("---")
    
    # 4 Gr√°ficos Recomendados
    st.subheader("üìä Gr√°ficos de An√°lise")
    
    # Gr√°fico 1: Gr√°fico de Barras ‚Äì Lucro por Produto
    st.subheader("üìå Gr√°fico de Barras ‚Äì Lucro por Produto")
    lucro_por_produto = df_filtrado.groupby('Produto')['Lucro (R$)'].sum().reset_index()
    if not lucro_por_produto.empty:
        fig_lucro_produto = px.bar(
            lucro_por_produto, 
            x='Produto', 
            y='Lucro (R$)',
            color='Produto',
            title="Comparar a lucratividade dos diferentes produtos",
            labels={'Lucro (R$)': 'Lucro Total (R$)', 'Produto': 'Produto'}
        )
        fig_lucro_produto.update_layout(showlegend=False)
        st.plotly_chart(fig_lucro_produto, use_container_width=True)
    else:
        st.info("Sem dados para o gr√°fico de Lucro por Produto.")
    
    # Gr√°fico 2: Gr√°fico de Linhas ‚Äì Evolu√ß√£o de Vendas ao longo do tempo
    st.subheader("üìÜ Gr√°fico de Linhas ‚Äì Evolu√ß√£o de Vendas ao longo do tempo")
    vendas_tempo = df_filtrado.groupby('Data de Produ√ß√£o')['Volume de Vendas (R$)'].sum().reset_index()
    if not vendas_tempo.empty:
        fig_vendas_tempo = px.line(
            vendas_tempo, 
            x='Data de Produ√ß√£o', 
            y='Volume de Vendas (R$)',
            title="Acompanhar a performance mensal ou anual com base em Data de Produ√ß√£o",
            labels={'Volume de Vendas (R$)': 'Volume de Vendas (R$)', 'Data de Produ√ß√£o': 'Data de Produ√ß√£o'}
        )
        st.plotly_chart(fig_vendas_tempo, use_container_width=True)
    else:
        st.info("Sem dados para o gr√°fico de Evolu√ß√£o de Vendas.")
    
    # Gr√°fico 3: Gr√°fico de Pizza ‚Äì Distribui√ß√£o de Volume de Vendas por Regi√£o
    st.subheader("üåç Gr√°fico de Pizza ‚Äì Distribui√ß√£o de Volume de Vendas por Regi√£o")
    vendas_por_regiao = df_filtrado.groupby('Regi√£o')['Volume de Vendas (R$)'].sum().reset_index()
    if not vendas_por_regiao.empty:
        fig_vendas_regiao = px.pie(
            vendas_por_regiao, 
            values='Volume de Vendas (R$)', 
            names='Regi√£o',
            title="Visualizar onde est√£o concentradas as vendas"
        )
        st.plotly_chart(fig_vendas_regiao, use_container_width=True)
    else:
        st.info("Sem dados para o gr√°fico de Vendas por Regi√£o.")
    
    # Gr√°fico 4: Gr√°fico de Colunas Empilhadas ‚Äì Custo de Produ√ß√£o vs Lucro por F√°brica
    st.subheader("üè≠ Gr√°fico de Colunas Empilhadas ‚Äì Custo de Produ√ß√£o vs Lucro por F√°brica")
    custo_lucro_fabrica = df_filtrado.groupby('F√°brica').agg({
        'Custo de Produ√ß√£o (R$)': 'sum',
        'Lucro (R$)': 'sum'
    }).reset_index()
    if not custo_lucro_fabrica.empty:
        # Preparar dados para gr√°fico empilhado
        custo_lucro_fabrica_melted = custo_lucro_fabrica.melt(
            id_vars=['F√°brica'], 
            value_vars=['Custo de Produ√ß√£o (R$)', 'Lucro (R$)'],
            var_name='Tipo', 
            value_name='Valor (R$)'
        )
        fig_custo_lucro = px.bar(
            custo_lucro_fabrica_melted,
            x='F√°brica',
            y='Valor (R$)',
            color='Tipo',
            title="Entender como os custos e lucros variam entre as unidades",
            barmode='group'  # Usar 'group' para colunas lado a lado em vez de empilhadas
        )
        st.plotly_chart(fig_custo_lucro, use_container_width=True)
    else:
        st.info("Sem dados para o gr√°fico de Custo vs Lucro por F√°brica.")
    
    # An√°lise de correla√ß√£o
    st.subheader("üîó An√°lise de Correla√ß√£o")
    colunas_correlacao = ['Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 'Volume de Vendas (R$)', 
                         'Custo de Produ√ß√£o (R$)', 'Lucro (R$)', 'Custo Log√≠stico (R$)']
    if not df_filtrado[colunas_correlacao].empty:
        correlacao = df_filtrado[colunas_correlacao].corr()
        fig_correlacao = px.imshow(
            correlacao,
            text_auto=True,
            aspect="auto",
            title="Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas"
        )
        st.plotly_chart(fig_correlacao, use_container_width=True)
    else:
        st.info("Sem dados suficientes para an√°lise de correla√ß√£o.")
    
    # Tabela de estat√≠sticas descritivas
    st.subheader("üìã Estat√≠sticas Descritivas")
    colunas_estatisticas = ['Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 'Volume de Vendas (R$)', 
                           'Custo de Produ√ß√£o (R$)', 'Lucro (R$)', 'Margem de Lucro (%)']
    estatisticas = df_filtrado[colunas_estatisticas].describe()
    if not estatisticas.empty:
        st.dataframe(estatisticas, use_container_width=True)
    else:
        st.info("Sem dados para estat√≠sticas descritivas.")
    
    # An√°lise por classifica√ß√£o de sustentabilidade
    st.subheader("üå± An√°lise por Sustentabilidade")
    col1, col2 = st.columns(2)
    
    with col1:
        sust_metrics = df_filtrado.groupby('Classifica√ß√£o de Sustentabilidade').agg({
            'Volume de Vendas (R$)': 'sum',
            'Lucro (R$)': 'sum',
            'Margem de Lucro (%)': 'mean'
        }).reset_index()
        if not sust_metrics.empty:
            fig_sust_vendas = px.bar(
                sust_metrics, 
                x='Classifica√ß√£o de Sustentabilidade', 
                y='Volume de Vendas (R$)',
                title="Volume de Vendas por Classifica√ß√£o de Sustentabilidade"
            )
            st.plotly_chart(fig_sust_vendas, use_container_width=True)
        else:
            st.info("Sem dados para o gr√°fico de Vendas por Sustentabilidade.")
    
    with col2:
        if not sust_metrics.empty:
            fig_sust_margem = px.bar(
                sust_metrics, 
                x='Classifica√ß√£o de Sustentabilidade', 
                y='Margem de Lucro (%)',
                title="Margem de Lucro por Classifica√ß√£o de Sustentabilidade"
            )
            st.plotly_chart(fig_sust_margem, use_container_width=True)
        else:
            st.info("Sem dados para o gr√°fico de Margem de Lucro por Sustentabilidade.")
    
    # Dados tratados para download
    st.subheader("üíæ Download dos Dados Tratados")
    
    # Criar vers√£o tratada dos dados
    df_download = df_filtrado.copy()
    
    # Formatar colunas monet√°rias
    colunas_monetarias = ['Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 'Lucro (R$)', 'Custo Log√≠stico (R$)']
    for coluna in colunas_monetarias:
        df_download[coluna] = df_download[coluna].apply(lambda x: f"R$ {x:,.2f}")
    
    # Formatar percentuais
    df_download['Margem de Lucro (%)'] = df_download['Margem de Lucro (%)'].apply(lambda x: f"{x:.2f}%")
    df_download['ROI (%)'] = df_download['ROI (%)'].apply(lambda x: f"{x:.2f}%")
    
    # Bot√£o de download
    csv = df_download.to_csv(index=False, encoding='utf-8-sig')
    st.download_button(
        label="üì• Download CSV Tratado",
        data=csv,
        file_name=f"dados_mineracao_tratados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime="text/csv"
    )
    
    # Informa√ß√µes sobre o tratamento
    st.subheader("‚ÑπÔ∏è Informa√ß√µes sobre o Tratamento dos Dados")
    
    st.markdown("""
    **Etapas de tratamento realizadas:**
    
    1. **Convers√£o de tipos de dados:**
       - Datas convertidas para formato datetime
       - Colunas num√©ricas convertidas para float/int
       
    2. **Cria√ß√£o de novas vari√°veis:**
       - Ano, M√™s e Trimestre extra√≠dos da data
       - Margem de Lucro (%) calculada
       - Custo Total (Produ√ß√£o + Log√≠stica)
       - ROI (%) calculado
       
    3. **Limpeza de dados:**
       - Remo√ß√£o de valores nulos
       - Remo√ß√£o de outliers extremos usando m√©todo IQR
       
    4. **KPIs Implementados:**
       - üíµ **Lucro Total (R$)**: Mede a rentabilidade da produ√ß√£o
       - üí∞ **Volume Total de Vendas (R$)**: Mostra o desempenho comercial
       - üìä **Margem de Lucro (%)**: Indicador da efici√™ncia da opera√ß√£o
       - üöö **Custo M√©dio Log√≠stico por Tonelada**: Avalia a efici√™ncia da distribui√ß√£o
       
    5. **Gr√°ficos Implementados:**
       - üìå **Gr√°fico de Barras ‚Äì Lucro por Produto**: Comparar a lucratividade dos diferentes produtos
       - üìÜ **Gr√°fico de Linhas ‚Äì Evolu√ß√£o de Vendas**: Acompanhar a performance temporal
       - üåç **Gr√°fico de Pizza ‚Äì Vendas por Regi√£o**: Visualizar concentra√ß√£o de vendas
       - üè≠ **Gr√°fico de Colunas ‚Äì Custo vs Lucro por F√°brica**: Entender varia√ß√µes entre unidades
    """)

else:
    st.error("‚ùå N√£o foi poss√≠vel carregar os dados. Verifique se o arquivo 'minera√ß√£o.csv' est√° presente no diret√≥rio.")

